[{"name":"load","implementation":"var found = false;\nfor (var i = 0; i < sharedVariables.length; i++) \n{\n    if(sharedVariables[i].name === parameters[0])\n    {\n       for (var j = 0; j < registers.length; j++) \n       {\n          if(registers[j].name === parameters[1])\n          {\n              registers[j].value =sharedVariables[i].value;\n              found = true;\n          }\n       }\n       if(found === false)\n       {\n          registers.push({\"name\": parameters[1], \n             \"value\":sharedVariables[i].value});\n       }\n    }\n}","cycles":"1"},{"name":"store","implementation":"var found = false;\nfor (var i = 0; i < registers.length; i++) \n{\n    if(registers[i].name === parameters[0])\n    {\n        for (var j = 0; j < sharedVariables.length; j++) \n        {\n            if(sharedVariables[j].name === parameters[1])\n            {\n               sharedVariables[j].value=registers[i].value;\n               found = true;\n               return;\n            }\n        }\n        if(found === false)\n        {\n            sharedVariables.push({\"name\": parameters[1], \n                   \"value\":registers[i].value});\n            return;\n        }\n     }\n}","cycles":"1"},{"name":"set","implementation":"var found = false;\n        for (var i = 0; i < registers.length; i++) {\n            if(registers[i].name === parameters[0])\n            {\n                registers[i].value = parameters[1];\n                found = true;\n                return;\n            }\n        }\n        if(found === false)\n        {\n            registers.push({\"name\": parameters[0], \"value\":parameters[1]});\n        }","cycles":"1"},{"name":"goto","implementation":"jump(parseInt(parameters[0]));","cycles":"1"},{"name":"dec","implementation":"for (var i = 0; i < registers.length; i++) {            if(registers[i].name === parameters[0])\n            {\n                registers[i].value = parseInt(registers[i].value)-1;\n                return;\n            }\n        }","cycles":"1"},{"name":"yield","implementation":"preempted = true;","cycles":"1"},{"name":"inc","implementation":"for (var i = 0; i < registers.length; i++) {            if(registers[i].name === parameters[0])\n            {\n                registers[i].value = parseInt(registers[i].value)+1;\n                return;\n            }\n        }","cycles":"1"},{"name":"end","implementation":"endprocess();","cycles":"1"},{"name":"wait","implementation":"wait(parameters[0]);","cycles":"1"},{"name":"signal","implementation":"signal(parameters[0]);","cycles":"1"},{"name":"jmpe","implementation":"for (var i = 0; i < registers.length; i++) \n{\n    if(registers[i].name === parameters[0])\n    {\n        if(parseInt(registers[i].value) === \n              parseInt(parameters[1]))\n        {\n            jump(parseInt(parameters[2]));\n            return;\n        }\n    }\n}","cycles":1},{"name":"jmplt","implementation":"for (var i = 0; i < registers.length; i++) \n{\n    if(registers[i].name === parameters[0])\n    {\n        if(parseInt(registers[i].value) < \n             parseInt(parameters[1]))\n        {\n            jump(parseInt(parameters[2]));\n            return;\n        }\n    }\n}","cycles":1},{"name":"jmpgt","implementation":"for (var i = 0; i < registers.length; i++) \n{\n    if(registers[i].name === parameters[0])\n    {\n        if(parseInt(registers[i].value) >\n              parseInt(parameters[1]))\n        {\n            jump(parseInt(parameters[2]));\n            return;\n        }\n    }\n}","cycles":1},{"name":"useio","implementation":"iowait(parameters[0])","cycles":1}]
